<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><title>OpenAsar Config</title>
<!-- HTML File made by Openasar devs. https://github.com/GooseMod/OpenAsar -->
<!-- <h2><img src="https://twitter.github.io/twemoji/v/14.0.0/svg/1f44b.svg"> Welcome to OpenAsar, you can configure its features here</h2> -->

</head><body><header>
  <h1>OpelAser Config</h1>
  <div id="t_settings" class="active">Settings</div>
  <div id="t_theming">Theming</div>
</header>

<div id="container"></div>

<footer>
  <button id="b_restart">Restart</button>
  <button id="b_close">Close</button>
</footer>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700;900&display=swap');

  :root {
    --background-primary: #36393f;
    --background-secondary: #2f3136;
    --background-tertiary: #202225;
    --accent: #5865F2;

    --foreground-primary: #fff;
    --foreground-muted: #92969d;
  }

  body, select, option, button {
    font-family: 'Roboto', sans-serif;
    color: var(--foreground-primary);
    user-select: none;
  }

  body {
    margin: 3vh 3vw;
    background: var(--background-primary);

    -webkit-app-region: drag;
  }

  header {
    display: flex;
    width: 100%;
    margin-bottom: 20px;
  }

  header > h1 {
    margin-right: 16vw;
  }

  header > div:not(:last-child) {
    margin-right: 8vw;
  }

  header > div {
    font-weight: 500;
    font-size: 22px;
    cursor: pointer;

    color: #ddd;
    transition: .5s color;
  }

  header > div::after {
    content: '';
    display: block;
    margin: auto;
    margin-top: 2px;
    height: 2px;
    width: 0px;
    background: transparent;
    transition: width .5s ease, background-color .5s ease;
  }

  header > div:hover {
    color: #fff;
  }

  header > div.active {
    color: #fff;
  }

  header > div:hover::after {
    width: 100%;
    background: var(--accent);
  }

  header > div.active::after {
    width: 100%;
    background: var(--accent);
  }

  .switch input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  .switch.on {
    background-color: var(--accent);
  }

  .switch.disabled {
    background-color: var(--foreground-muted);
    cursor: unset;
  }

  .switch.disabled * {
    cursor: unset;
  }

  .switch, .switch div {
    border-radius: 1em;
  }

  .switch {
    transition: background-color .2s;

    display: inline-block;
    font-size: 18px;
    height: 18.5px;
    width: 36px;
    background-color: var(--background-tertiary);

    display: flex;
    align-items: center;

    cursor: pointer;
  }

  .switch div {
    margin-left: 2px;

    height: 13.5px;
    width: 14px;
    background: #ddd;
    box-shadow: 0 0.1em 0.3em rgba(0, 0, 0, 0.4);
    transition: all 300ms;
  }

  .switch input:checked + div {
    transform: translateX(17px);
  }

  #container > div {
    display: flex;
    flex-direction: column;
    margin-bottom: 30px;
  }

  #container > div > :first-child {
    margin-bottom: 4px;
    font-size: 18px;
    font-weight: 700;
  }

  #container > div > :nth-child(2) {
    color: var(--foreground-muted);
    font-size: 14px;
  }

  select, option {
    background: var(--background-secondary);
    border: 2px solid var(--background-tertiary);
    padding: 3px;
    font-weight: 500;
    width: 110px;
    border-radius: 4px;
  }

  .switch, select {
    float: right;
    line-height: 18px;
  }

  footer {
    display: flex;
    position: absolute;
    bottom: 4vh;
    left: 5%;
    width: 90%;
    justify-content: space-around;
  }

  button {
    background: var(--accent);
    border: 0;
    padding: 6px 30px;
    font-size: 20px;
    font-weight: 700;
    border-radius: 6px;
    cursor: pointer;
  }

  h1 {
    font-size: 22px;
    margin: 0;
  }

  h2 {
    font-size: 15px;
    font-weight: 500;
    margin-bottom: 16px;
    margin-top: 6px;

    color: #bcbdbe;
  }

  img {
    width: 18px;
    position: relative;
    top: 3px;
  }

  svg {
    position: relative;
    top: 4px;
  }

  b {
    font-weight: 700;
  }

  header > div, .switch, button, select, option, .monaco-editor {
    -webkit-app-region: none;
  }
</style>

<script>
  const debounce = (handler, timeout) => {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      timer = setTimeout(() => handler(...args), timeout);
    };
  };

  const experimental = (arr) => {
    arr[0] = `<svg width="22" height="22" viewBox="0 0 16 16"><path style="fill: currentColor" fill-rule="evenodd" d="M5 5.782V2.5h-.25a.75.75 0 0 1 0-1.5h6.5a.75.75 0 0 1 0 1.5H11v3.282l3.666 5.76C15.619 13.04 14.543 15 12.767 15H3.233c-1.776 0-2.852-1.96-1.899-3.458L5 5.782zM9.5 2.5h-3V6a.75.75 0 0 1-.117.403L4.73 9h6.54L9.617 6.403A.75.75 0 0 1 9.5 6V2.5zm-6.9 9.847L3.775 10.5h8.45l1.175 1.847a.75.75 0 0 1-.633 1.153H3.233a.75.75 0 0 1-.633-1.153z"/></svg> ` + arr[0];
    arr[1] = `<b>Experimental:</b> ` + arr[1];

    return arr;
  };

  const config = Native.get();
  // const config = {};
  const mainSettings = [
    [ 'Focus', 'Which aspect of the client to focus on', 'cmdPreset', [ 'performance', 'battery life', 'balanced' ], () => config.cmdPreset ],
    [ 'No Track', 'Disables Discord\'s added tracking / analytics / telemetry (Sentry, science)', 'noTrack', true ],
    [ 'Disable Typing', 'Disables showing other people that you are typing', 'noTyping', false ],
    [ 'Splash Theming', 'Themes splash screen the same as your client mod\'s', 'themeSync', true ],
    experimental([ 'Quickstart', 'Makes Discord start faster by skipping some steps like update checking on start', 'quickstart', false ]),
    experimental([ 'Multi Instance', 'Allows Discord to have multiple instances / windows open at once', 'multiInstance', false ]),
  ];

  const makeSwitch = (listener, initial = false, disabled = false) => {
    const switchEl = document.createElement('label');
    switchEl.className = 'switch' + (disabled ? ' disabled' : '');
    if (initial) switchEl.classList.add('on');

    const switchInputChildEl = document.createElement('input');
    switchInputChildEl.type = 'checkbox';
    switchInputChildEl.checked = initial;
    switchInputChildEl.disabled = disabled;

    switchInputChildEl.onchange = disabled ? () => {} : () => {
      const value = switchInputChildEl.checked;

      setTimeout(() => {
        if (value) switchEl.classList.add('on');
        else switchEl.classList.remove('on');
      }, 160);

      listener(value);
    };

    switchEl.appendChild(switchInputChildEl);

    const switchDivChildEl = document.createElement('div');
    switchEl.appendChild(switchDivChildEl);

    return switchEl;
  };

  const makeDropdown = (listener, opts, def) => {
    const dropdownEl = document.createElement('select');

    for (const opt of opts) {
      const el = document.createElement('option');
      el.textContent = opt[0].toUpperCase() + opt.slice(1);
      el.value = opt;

      if (opt.startsWith(def)) el.selected = true;

      dropdownEl.append(el);
    }

    dropdownEl.onchange = () => {
      listener(dropdownEl.value);
    };

    return dropdownEl;
  };

  const makeItem = ([ name, desc, key, def, def2 ]) => {
    if (typeof def === 'function') def = def();
    if (typeof def2 === 'function') def2 = def2();

    const el = document.createElement('div');

    const nameEl = document.createElement('div');
    nameEl.innerHTML = name;

    const descEl = document.createElement('div');
    descEl.innerHTML = desc;

    const lookup = {
      'performance': 'perf',
      'battery life': 'battery',
      'balanced': 'balanced'
    };

    const switchEl = typeof def === 'boolean' ? makeSwitch((v) => {
      config[key] = v;
      Native.set(config);
    }, config[key] ?? def, def2 === true) : makeDropdown(typeof key === 'function' ? key : v => {
      config[key] = lookup[v] ?? v;
      Native.set(config);
    }, def, key === 'cmdPreset' ? Object.keys(lookup)[Object.values(lookup).indexOf(def2)] : def2 );

    nameEl.append(switchEl);
    el.append(nameEl, descEl);

    return el;
  };

  container.append(...mainSettings.map(makeItem));

  b_restart.onclick = () => Native.restart();
  b_close.onclick = () => window.close();

  const buildSettings = x => {
    container.innerHTML = '';
    container.append(...x.map(makeItem));
  };

  const loadScript = async x => {
    const el = document.createElement('script');
    el.src = x;
    document.head.append(el);

    await new Promise(res => el.onload = res);
  };

  t_settings.onclick = () => {
    document.querySelectorAll('[id^="t_"]').forEach(x => x.classList.remove('active'));
    t_settings.classList.add('active');

    buildSettings(mainSettings);
  };
  t_theming.onclick = async () => {
    document.querySelectorAll('[id^="t_"]').forEach(x => x.classList.remove('active'));
    t_theming.classList.add('active');

    container.innerHTML = '';

    if (!window.monaco) {
      await loadScript('monaco-editor/min/vs/loader.js');
      // await new Promise(res => setTimeout(res, 500));

      require.config({ paths: { vs: 'monaco-editor/min/vs' } });
      await new Promise(res => require(['vs/editor/editor.main'], res));
    }

    if (!t_theming.classList.contains('active')) return;

    const monacoContainer = document.createElement('div');
    monacoContainer.style.width = '100%';
    monacoContainer.style.height = '75vh';
    container.appendChild(monacoContainer);

    window.editor = monaco.editor.create(monacoContainer, {
      value: config.css || `/* Add your own Custom CSS here.
Have a theme you want to use? Copy and paste the contents here.
You need to restart (click the restart button) after changing. */`,
      language: 'css',
      theme: 'vs-dark',
      minimap: {
        enabled: false
      }
    });

    const save = debounce(() => Native.set(config), 500);

    editor.getModel().onDidChangeContent(e => {
      config.css = editor.getValue();
      save();
    });
  };
</script>
</body><style id="stylus-8" type="text/css" class="stylus">/* ==UserStyle==
@name           Unroundeding YouTube
@namespace      youtube
@version        1.0.0
@description    Undo YouTube's new rounded corners
@author         nobody
@preprocessor   stylus
==/UserStyle== */


.yt-spec-button-shape-next--size-m {border-radius:0px !important;}

ytd-searchbox[desktop-searchbar-style="rounded_corner_borders_light_btn"] #container.ytd-searchbox, ytd-searchbox[desktop-searchbar-style="rounded_corner_autofocus"] #container.ytd-searchbox {
    border-radius:1px !important;}
#search-icon-legacy{border-radius:1px !important;}
ytd-compact-video-renderer > div:nth-child(1) > ytd-thumbnail:nth-child(1) > a:nth-child(1){border-radius:0px !important;}
ytd-thumbnail.ytd-compact-radio-renderer > a:nth-child(1){border-radius:0px !important;}
ytd-multi-page-menu-renderer.style-scope{border-radius:0px !important;}
ytd-guide-entry-renderer > a:nth-child(1) {border-radius:0px !important;}
ytd-guide-entry-renderer{border-radius:0px !important;}
ytd-grid-video-renderer > div:nth-child(1) > ytd-thumbnail:nth-child(1) > a:nth-child(1) {border-radius:0px !important;}
ytd-thumbnail[size] ytd-thumbnail-overlay-time-status-renderer.ytd-thumbnail, ytd-thumbnail[size] ytd-thumbnail-overlay-button-renderer.ytd-thumbnail {
  border-radius: 1px !important;
}
ytd-badge-supported-renderer > div:nth-child(1) {border-radius:0px !important;}
ytd-notification-renderer[rounded-thumbnails] .thumbnail-container.ytd-notification-renderer {border-radius:0px !important;}
#chat{border-radius:0px !important;}
ytd-live-chat-frame[rounded-container] iframe.ytd-live-chat-frame {border-radius:0px !important;}
ytd-toggle-button-renderer.ytd-live-chat-frame {border-radius:0px !important;}
.ytp-offline-slate-bar {border-radius:0px !important;}
.ytp-offline-slate-button {border-radius:0px !important;}
yt-live-chat-banner-poll-choice {border-radius:0px !important;}
html{--yt-button-border-radius: 0px !important;
--in-content-button-border-radius: 0px !important;}
#percentage-container.yt-live-chat-banner-poll-choice {border-radius:2px !important;}
#vote-percentage-bar {border-radius:2px !important;}
ytd-menu-popup-renderer.style-scope {border-radius:0px !important;}
ytd-player.ytd-channel-video-player-renderer {border-radius:0px !important;}
ytd-rich-grid-media > div:nth-child(1) > ytd-thumbnail:nth-child(1) > a:nth-child(1) {border-radius:0px !important;}
#inline-preview-player {border-radius:0px !important;}
ytd-video-preview[rounded-container] #video-preview-container.ytd-video-preview, ytd-video-preview[rounded-container] #player-container.ytd-video-preview {border-radius:0px !important;}
ytd-video-preview[rounded-container] #inline-preview-player.ytd-video-preview {border-radius:0px !important;}
.ytp-player-minimized.ytp-rounded-miniplayer .html5-main-video, .ytp-player-minimized.ytp-rounded-miniplayer .ytp-miniplayer-scrim, .ytp-player-minimized.ytp-rounded-miniplayer.html5-video-player {border-radius:0px !important;}
#inline-preview-player > div:nth-child(1) > video:nth-child(1) {border-radius:0px !important;}
div.ytp-ce-video, .ytp-ce-playlist, .ytp-ce-expanding-overlay-background {border-radius: 0px !important;}
.ytp-rounded-tooltip .ytp-tooltip-text-wrapper {
    border-radius: 0px !important;}
ytd-playlist-panel-renderer > div {border-radius: 0px !important;}
ytd-playlist-panel-renderer[modern-panels]:not([hide-header-text]) .title.ytd-playlist-panel-renderer {
    font-family: Roboto !important;
font-weight: 500;
font-size: 1.4rem;
line-height: 2rem;
max-height: 2rem;
overflow: hidden;
display: block;
-webkit-line-clamp: 1;
text-overflow: ellipsis;}
ytd-thumbnail > a {border-radius: 0px !important;}
.ytp-settings-menu.ytp-rounded-menu, .ytp-screen-mode-menu.ytp-rounded-menu {
  border-radius: 0px !important;
}
ytd-expandable-metadata-renderer[round-container]:not([is-expanded]) {
  --yt-img-border-radius: 0px !important;
}
ytd-expandable-metadata-renderer[round-container] {
  border-radius: 0px !important;
}
.ytp-tooltip-edu{display:none !important;}
ytd-mini-guide-entry-renderer[guide-refresh] {border-radius: 0px !important;}
ytd-mini-guide-renderer{border-right: 1px solid var(--redux-spec-10-percent-layer) !important;}
yt-dropdown-menu[modern-dialogs] #menu.yt-dropdown-menu {
  border-radius: 0px !important;
}
#contentWrapper.tp-yt-iron-dropdown > div {border-radius: 0px !important;}
yt-button-shape.style-scope:nth-child(3) > button.yt-spec-button-shape-next{margin-bottom: -3px;
margin-top: 3px;}
.yt-spec-button-shape-next--size-m.yt-spec-button-shape-next--segmented-start::after {
  width: 0px !important;
}</style></html>